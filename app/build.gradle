plugins {
    id 'com.android.application'
}

android {
    namespace = 'com.vectras.vm'
    compileSdk = rootProject.ext.compileApi

    defaultConfig {
        applicationId = "com.vectras.vm"
        minSdk = rootProject.ext.minApi
        targetSdk = rootProject.ext.targetApi
        versionCode = 1
        versionName = "1.0"
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled = false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    buildFeatures {
        viewBinding true
        dataBinding true
    }
    lint {
        // Create a baseline for the existing lint warnings/errors so the build is not blocked.
        // Run `./gradlew updateLintBaseline` once to generate `lint-baseline.xml` and commit it.
        // This preserves current issues while allowing incremental fixes over time.
        baseline = file("lint-baseline.xml")
        abortOnError false
    }
}

dependencies {
    // Glide
    implementation 'com.github.bumptech.glide:glide:4.16.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.16.0'

    // Test dependencies
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    // Common AndroidX / Material dependencies (provide styles, widgets and themes required by the layouts)
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.preference:preference:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.airbnb.android:lottie:5.2.0'
    implementation project(':terminal-view')
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.google.guava:guava:32.1.2-android'
    implementation 'org.zeroturnaround:zt-zip:1.14'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.activity:activity-ktx:1.8.0'
    implementation 'androidx.recyclerview:recyclerview:1.3.0'
}

// --- Firmware / ROM asset fetch (non-LFS on fork) ------------------------------------------
// Provides a lightweight way to obtain large firmware files (e.g., QEMU_VARS.img)
// without committing them to the fork repository. The URL can point to a Release asset
// or an external CDN. Adjust FIRMWARE_URL as needed.
ext.FIRMWARE_URL = System.getenv('QEMU_VARS_URL') ?: "https://example.com/path/to/QEMU_VARS.img"
def firmwareDir = file("${project.projectDir}/src/main/assets/roms")
def firmwareFile = file("${firmwareDir}/QEMU_VARS.img")

tasks.register('fetchFirmware') {
    description = 'Downloads QEMU_VARS.img firmware asset if not already present.'
    group = 'vectras'
    outputs.file(firmwareFile)
    doLast {
        if (firmwareFile.exists()) {
            logger.lifecycle("Firmware already present: ${firmwareFile} (${firmwareFile.length()} bytes)")
            return
        }
        if (!firmwareDir.exists() && !firmwareDir.mkdirs()) {
            throw new GradleException("Could not create firmware directory: ${firmwareDir}")
        }
        def url = new URL(ext.FIRMWARE_URL)
        logger.lifecycle("Downloading firmware from ${url} ...")
        url.openConnection().with { conn ->
            conn.connectTimeout = 15000
            conn.readTimeout = 600000 // 10 min for large file
            conn.inputStream.withCloseable { input ->
                firmwareFile.withOutputStream { out ->
                    byte[] buf = new byte[1 * 1024 * 1024]
                    long total = 0
                    int r
                    long lastReport = System.currentTimeMillis()
                    while ((r = input.read(buf)) != -1) {
                        out.write(buf, 0, r)
                        total += r
                        def now = System.currentTimeMillis()
                        if (now - lastReport > 5000) { // report every 5s
                            logger.lifecycle(String.format(Locale.ROOT, "Downloaded %,d bytes...", total))
                            lastReport = now
                        }
                    }
                    logger.lifecycle(String.format(Locale.ROOT, "Firmware download complete (%,d bytes).", total))
                }
            }
        }
    }
}

// Ensure firmware is present before building APK (can be skipped via -PskipFirmware)
tasks.matching { it.name == 'preBuild' }.configureEach {
    if (!project.hasProperty('skipFirmware')) {
        dependsOn tasks.named('fetchFirmware')
    } else {
        logger.lifecycle('Skipping firmware fetch due to -PskipFirmware flag.')
    }
}

// Apply Crashlytics plugin if the classpath provides it
try {
    apply plugin: 'com.google.firebase.crashlytics'
} catch (Exception ignored) {
    logger.warn('Firebase Crashlytics Gradle plugin not available on classpath; skipping crashlytics setup.')
}

// Apply Google Services plugin only if google-services.json exists.
if (file("google-services.json").exists()) {
    apply plugin: 'com.google.gms.google-services'
} else {
    logger.warn('google-services.json not found in app/ â€” skipping com.google.gms.google-services plugin. Add the file from Firebase Console to enable Analytics and other Firebase services.')
}

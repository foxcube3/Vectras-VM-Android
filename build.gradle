// Replaced legacy buildscript/classpath with version catalog plugin aliases (see settings.gradle)

// Repositories defined centrally in settings.gradle via dependencyResolutionManagement; removing per-project repositories block to satisfy FAIL_ON_PROJECT_REPOS.

// Force consistent Kotlin stdlib version across modules
subprojects {
    configurations.configureEach {
        resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'org.jetbrains.kotlin' && details.requested.name.startsWith('kotlin-stdlib')) {
                details.useVersion '1.8.10'
            }
        }
    }

    // Optional: enable deprecation/unchecked warnings when invoked with -PenableDeprecationLint
    tasks.withType(JavaCompile).configureEach { task ->
        if (project.hasProperty('enableDeprecationLint')) {
            options.compilerArgs += ['-Xlint:deprecation', '-Xlint:unchecked']
            options.warnings = true
        }
    }
}

ext {
    // Switched to stable API 34 per request (was preview 36). Override via -PCOMPILE_API / -PTARGET_API / -PTOOLS_VERSION if needed.
    toolsVersion = properties.get('TOOLS_VERSION', '34.0.0')
    compileApi = properties.get('COMPILE_API', 34)
    targetApi = properties.get('TARGET_API', 34)
    minApi = properties.get('MIN_API', 26) // Increased earlier to 26
}

// Apply custom deprecated API scan plugin (implementation in buildSrc)
apply plugin: 'com.vectras.deprecated-scan'

// CI verification: ensure no lingering LFS pointer .so files committed
tasks.register('verifyNoLfsPointers') {
    description = 'Fails if any committed jniLibs/*.so files are Git LFS pointer stubs.'
    group = 'verification'
    doLast {
        def pointer = 'version https://git-lfs'
        def bad = []
        fileTree('.') {
            include '**/src/main/jniLibs/**/*.so'
        }.each { f ->
            if (f.text.startsWith(pointer)) {
                bad << f
            }
        }
        if (!bad.isEmpty()) {
            throw new GradleException("Found LFS pointer .so files: " + bad.join(', '))
        }
        logger.lifecycle("[verifyNoLfsPointers] OK: no pointer .so files")
    }
}

// Root project may not have a 'check' task (no java/android plugin applied). Guard it.
def existingCheck = tasks.findByName('check')
if (existingCheck != null) {
    existingCheck.dependsOn 'verifyNoLfsPointers'
} else {
    tasks.register('check') {
        group = 'verification'
        description = 'Aggregate verification task (auto-created); includes verifyNoLfsPointers.'
        dependsOn 'verifyNoLfsPointers'
    }
}
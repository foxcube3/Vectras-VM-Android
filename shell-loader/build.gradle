plugins {
    id 'com.android.application'
}

android {
    compileSdk project.ext.compileApi

    defaultConfig {
        minSdkVersion project.ext.minApi
        applicationId "com.vectras.vm.shellloader"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "logTag", "\"Termux:X11 loader\""
        buildConfigField "String", "CLASS_ID", "\"com.vectras.vm.x11.CmdEntryPoint\""
        buildConfigField "String", "packageNotInstalledErrorText",
                """\"Termux:X11 application is not found.\" +\"You should choose latest successful workflow here: https://github.com/termux/termux-x11/actions/workflows/debug_build.yml\" +\"After this you should download \\"termux-x11-ARCH-debug\\" or \\"termux-x11-universal-debug\\" artifact and install apk contained in this zip file.\""""
        buildConfigField "String", "packageSignatureMismatchErrorText",
                "\"Signature verification of target application " + android.namespace + " failed.\\nPlease, reinstall both termux-x11 package and Termux:X11 application from the same source\""
        buildConfigField "String", "COMMIT", "\"" + ("git rev-parse HEAD\n".execute().getText().trim() ?: (System.getenv('CURRENT_COMMIT') ?: "NO_COMMIT")) + "\""
    }

    buildTypes {
        debug {
            signingConfig null
        }
    }

    buildFeatures {
        buildConfig true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFileName = "loader.apk"
        }
    }
}

dependencies {
    compileOnly project(':shell-loader:stub')
}

def signingConfig = project(':app').android.signingConfigs.debug
// This block is left here to define SIGNATURE for BuildConfig if needed elsewhere
ext.defaultBuildConfigField "int", "SIGNATURE", { ->
    def keyStore = java.security.KeyStore.getInstance(java.security.KeyStore.getDefaultType())
    keyStore.load(new FileInputStream(signingConfig.storeFile), signingConfig.keyPassword.toCharArray())
    String.valueOf(Arrays.hashCode(keyStore.getCertificate(signingConfig.keyAlias).getEncoded()))
}.call()
